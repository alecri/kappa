# comparison of estimated quantities
cbind(twostage = coef(twostage), onestage = coef(onestage))
cbind(twostage = c(vcov(twostage))[-2], onestage = c(vcov(onestage))[-2]) %>% round(5)
# predicted curves
newd %>%
mutate(
twostage = predict(twostage, ., expo = T)$pred,
onestage = predict(onestage, ., expo = T)$pred
) %>%
gather(analysis, pred, -dose) %>%
mutate(analysis = factor(analysis, labels = c("One-stage", "Two-stage"))) %>%
ggplot(aes(dose, pred, linetype = analysis)) +
geom_line() +
scale_y_continuous(trans = "log", breaks = pretty_breaks()) +
labs(x = "Coffee consumption (cups/day)", y = "Relative risk", linetype = "Curve") +
scale_linetype_manual(values = c(`One-stage` = "solid", `Two-stage` = "dashed"))
tab_coffee <- newd_tab %>%
bind_cols(predict(twostage, ., expo = T)[, -c(1:2)]) %>%
bind_cols(predict(onestage, ., expo = T)[, -c(1:2)]) %>%
round(2)
# blup
bi_os <- data.frame(
id = unique(coffee$id),
xmin = tapply(coffee$dose, coffee$id, min),
xref = tapply(coffee$dose, coffee$id, head, 1),
xmax = tapply(coffee$dose, coffee$id, max),
bi = t(apply(blup(onestage), 1, function(x) x + rbind(coef(onestage))))
)
# blup
bi_os <- data.frame(
id = unique(coffee$id),
xmin = tapply(coffee$dose, coffee$id, min),
xref = tapply(coffee$dose, coffee$id, head, 1),
xmax = tapply(coffee$dose, coffee$id, max),
bi = t(apply(dosresmeta::blup(onestage), 1, function(x) x + rbind(coef(onestage))))
)
# blup
bi_os <- data.frame(
id = unique(coffee$id),
xmin = tapply(coffee$dose, coffee$id, min),
xref = tapply(coffee$dose, coffee$id, head, 1),
xmax = tapply(coffee$dose, coffee$id, max),
bi = t(apply(dosresmeta:::blup(onestage), 1, function(x) x + rbind(coef(onestage))))
)
# blup
bi_os <- data.frame(
id = unique(coffee$id),
xmin = tapply(coffee$dose, coffee$id, min),
xref = tapply(coffee$dose, coffee$id, head, 1),
xmax = tapply(coffee$dose, coffee$id, max),
bi = t(apply(dosresmeta:::blup(onestage), 1, function(x) x + rbind(coef(onestage))))
)
dosresmeta:::blup
dosresmeta::blup
# blup
bi_os <- data.frame(
id = unique(coffee$id),
xmin = tapply(coffee$dose, coffee$id, min),
xref = tapply(coffee$dose, coffee$id, head, 1),
xmax = tapply(coffee$dose, coffee$id, max),
bi = t(apply(dosresmeta:::blup.dosresmeta(onestage), 1, function(x) x + rbind(coef(onestage))))
)
bi_ts <- data.frame(
id = setdiff(unique(coffee$id), c(28, 29)),
bi = t(apply(blup(twostage), 1, function(x) x + rbind(coef(twostage))))
)
bi_ts <- data.frame(
id = setdiff(unique(coffee$id), c(28, 29)),
bi = t(apply(dosresmeta:::blup.dosresmeta(twostage), 1, function(x) x + rbind(coef(twostage))))
)
bi <- merge(bi_os, bi_ts, by = "id", all = T)
predi <- data.frame(
x = newd$dose,
y_os = pred_sq(coef =  bi[, c("bi.1.x", "bi.2.x")], newd$dose, bi$xref),
y_ts = pred_sq(coef =  bi[, c("bi.1.y", "bi.2.y")], newd$dose, bi$xref)
)
p_coffee <- lapply(seq_along(unique(coffee$id)), function(i){
idi <- unique(coffee$id)[i]
ggplot(subset(coffee, id == idi), aes(x = dose, y = exp(logrr))) +
geom_errorbar(aes(ymin = exp(logrr - 1.96*se), ymax = exp(logrr + 1.96*se)), width = .3) +
geom_line(data = predi, aes_string(x = "x", y = paste0("y_os.pred", i), lty = "'One-stage'"), lwd = 1) +
geom_line(data = predi, aes_string(x = "x", y = paste0("y_ts.pred", i), lty = "'Two-stage'"), lwd = 1) +
scale_y_continuous(trans = "log", breaks = pretty_breaks()) +
theme(legend.position = "none")  + xlim(c(0, 8)) +
labs(title = paste0("Study ID ", idi), x = "Dose", y = "Relative Risk", lty = "Curvwe")
})
legend_grid_coffee <- get_legend(p_coffee[[1]] + theme(legend.position = "bottom"))
p_grid_coffee <- plot_grid(plotlist = c(p_coffee, list(legend_grid_coffee)), nrow = 5, ncol = 3,
rel_heights = c(1, 1, 1, 1, .1))
# model comparison
quadr_ml <- dosresmeta(logrr ~ dose + I(dose^2), id = id, se = se, data = coffee,
covariance = "user", Slist = Slist, proc = "1stage", method = "ml")
spk_ml <- dosresmeta(logrr ~ I(1*(dose < 1)) + I((dose-1)*(dose >= 1)) +
I((dose-4)*(dose >= 4)),
id = id, se = se, data = coffee,
covariance = "user", proc = "1stage", method = "ml",
Slist = Slist, control = list(maxiter = 5000))
k2 <- c(0, 1, 3, 5, 7, 10)
categ <- dosresmeta(logrr ~ relevel(cut(dose, breaks = k2, include.lowest = T, right = F), 2),
id = id, se = se, data = coffee,
covariance = "user", proc = "1stage", method = "ml",
Slist = Slist, control = list(maxiter = 5000))
waldtest(vcov(categ), coef(categ), 2:4)
AIC_os <- round(sapply(list(quadr = quadr_ml, spk = spk_ml, categ = categ), AIC), 2)
xref <- 1
comp <- rbind(xref, newd) %>%
mutate(
quadr = predict(quadr_ml, ., expo = T)$pred,
spike = predict(spk_ml, ., expo = T)$pred,
categories = predict(categ, ., expo = T)$pred
)
p_comp <- ggplot(comp, aes(dose, quadr, linetype = "Quadratic")) +
geom_line() +
geom_line(data = subset(comp, dose < 1), aes(y = spike, linetype = "Spike at 0")) +
geom_line(data = subset(comp, dose >= 1), aes(y = spike, linetype = "Spike at 0")) +
scale_y_continuous(trans = "log", breaks = pretty_breaks()) +
labs(x = "Coffee consumption (cups/day)", y = "Relative risk", linetype = "Model") +
scale_linetype_manual(values = c(`Quadratic` = "dashed", `Spike at 0` = "solid",
`Categories` = "longdash"))
for (i in seq_along(k2[-1])){
p_comp <- p_comp + geom_line(data = subset(comp, dose >= k2[i] & dose < k2[i+1]),
aes(y = categories, linetype = "Categories"))
}
p_comp
p_comp <- ggplot(comp, aes(dose, quadr, col = "Quadratic")) +
geom_line() +
geom_line(data = subset(comp, dose < 1), aes(y = spike, col = "Spike at 0")) +
geom_line(data = subset(comp, dose >= 1), aes(y = spike, col = "Spike at 0")) +
scale_y_continuous(trans = "log", breaks = pretty_breaks()) +
labs(x = "Coffee consumption (cups/day)", y = "Relative risk", col = "Model") +
scale_color_manual(values = c(`Quadratic` = "blue", `Spike at 0` = "red",
`Categories` = "green"))
for (i in seq_along(k2[-1])){
p_comp <- p_comp + geom_line(data = subset(comp, dose >= k2[i] & dose < k2[i+1]),
aes(y = categories, col = "Categories"))
}
p_comp
# meta-regression
quadr_reg <- dosresmeta(logrr ~ dose + I(dose^2), id = id, se = se, data = coffee,
covariance = "user", Slist = Slist, proc = "1stage",
mod = ~ gender, method = "reml")
summary(quadr_reg)
waldtest(vcov(quadr_reg), coef(quadr_reg), 3:6)
coffee_vpc <- coffee %>%
filter(se != 0) %>%
mutate(
`Quadratic` = vpc(onestage),
`Quadratic meta-regression` = vpc(quadr_reg)
) %>%
gather(curve, vpc, Quadratic:`Quadratic meta-regression`)
ggplot(coffee_vpc, aes(dose, vpc, group = curve)) +
geom_point(aes(shape = curve)) +
geom_smooth(aes(linetype = curve), method = "loess", se = F, col = "black") +
labs(y = "VPC", x = "Coffee consumption (cups/day)", shape = "Curve", linetype = "Curve") +
theme(legend.position = "top")
coffee_vpc <- coffee %>%
filter(se != 0) %>%
mutate(
`Quadratic` = vpc(onestage),
`Quadratic meta-regression` = vpc(quadr_reg)
) %>%
gather(curve, vpc, Quadratic:`Quadratic meta-regression`)
p_coffee_vpc <- ggplot(coffee_vpc, aes(dose, vpc, group = curve)) +
geom_point(aes(shape = curve)) +
geom_smooth(aes(col = curve), method = "loess", se = F, col = "black") +
labs(y = "VPC", x = "Coffee consumption (cups/day)", shape = "Curve", col = "Curve") +
scale_color_manual(values = c(`Quadratic` = "blue", `Quadratic meta-regression` = "red")) +
theme(legend.position = "top")
p_coffee_vpc
coffee_vpc
p_coffee_vpc <- ggplot(coffee_vpc, aes(dose, vpc, group = curve)) +
geom_point(aes(shape = curve)) +
geom_smooth(aes(col = curve), method = "loess", se = F) +
labs(y = "VPC", x = "Coffee consumption (cups/day)", shape = "Curve", col = "Curve") +
scale_color_manual(values = c(`Quadratic` = "blue", `Quadratic meta-regression` = "red")) +
theme(legend.position = "top")
p_coffee_vpc
p_coffee_vpc <- ggplot(coffee_vpc, aes(dose, vpc, group = curve)) +
geom_point(aes(shape = curve, col = curve)) +
geom_smooth(aes(col = curve), method = "loess", se = F) +
labs(y = "VPC", x = "Coffee consumption (cups/day)", shape = "Curve", col = "Curve") +
scale_color_manual(values = c(`Quadratic` = "blue", `Quadratic meta-regression` = "red")) +
theme(legend.position = "top")
p_coffee_vpc
bi
lapply(AIC_pi_red, round, 2) %>%
do.call("cbind", .) %>%
`rownames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
rbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "p") %>%
kable("latex", align = "c", booktabs = T, escape = F,
caption = "AIC for the study-specific second-degree fractional polynomials with power terms specified by $p$ in a dose-response meta-analysis between red mead consumption (g per day) and bladder cancer risk. The last row reports the power term corresponding to the lowest AIC.") %>%
kable_styling(font_size = 8)
library(dosresmeta)
library(tidyverse)
library(gridExtra)
library(rms)
library(metafor)
library(hetmeta)
library(cowplot)
library(knitr)
library(kableExtra)
data("red_bc")
chr_red <- red_bc %>%
group_by(id) %>%
summarise(xref = dose[se == 0], min = min(dose), p25 = quantile(dose, .25),
median = median(dose), p75 = quantile(dose, .75), max = max(dose))
kable(chr_red, "latex", align = "c", booktabs = T, escape = F, digits = 1,
col.names = c("ID", "Referent", "Min", "P25", "Median", "P75", "Max"),
caption = "Descriptive statistics of the assigned dose levels for 13 studies
included in a dose--response meta-analysis between red meat consumption and bladder
cancer risk")
ggplot(chr_red, aes(x = min, y = seq_along(id))) +
geom_point(aes(x = xref), shape = 4, size = 1.5) +
geom_segment(aes(xend = max, yend = seq_along(id)), linetype = "dotted") +
geom_point(data = filter(red_bc, se != 0) %>%
mutate(id = replace(id, id > 12, id[id > 12] - 1)), aes(x = dose, y = id)) +
labs(x = "Red meat consumption (g per day)", y = "Study ID") +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_blank())
fpgrid <- as.matrix(fpgrid())
#max(chr_red$ref)
shift <- 10
scale <- 10
Slist_red <- do.call("list", by(red_bc, red_bc$id, function(x){
if (any(is.na(x$n))){
diag(x$se[x$se!=0]^2, ncol = length(x$se[x$se!=0]))
} else {
covar.logrr(y = logrr, v = I(se^2), cases = cases, n = n,
type = type, data = x)
}
}))
# individual fp2 model: 13 lists of 36
mod_pi_red <- map2(split(red_bc, red_bc$id), Slist_red,
~ lapply(array_branch(fpgrid, 1), function(p)
dosresmeta(logrr ~ fracpol(dose, p = p, shift = shift, scale = scale),
se = se, data = .x, covariance = "user", Slist = .y)
))
AIC_pi_red <- lapply(mod_pi_red, function(x) sapply(x, AIC))
pb_red <- lapply(AIC_pi_red, which.min)
fpgrid[unlist(pb_red), ]
# 13 lists of 1 model
mod_pb_red <- Map(function(x, y) x[[y]], mod_pi_red, pb_red)
# combined fp2 model: list of 36
mod_pi1_red <- map(array_branch(fpgrid, 1),
~ dosresmeta(logrr ~ fracpol(dose, p = .x, shift = shift, scale = scale),
id = id, se = se, data = red_bc, covariance = "user",
Slist = Slist_red, proc = "1stage"))
# final model
mod_pb1_red <- mod_pi1_red[[which.min(sapply(mod_pi1_red, AIC))]]
AIC_pi_red
lapply(AIC_pi_red, round, 2) %>%
do.call("cbind", .) %>%
`rownames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
rbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "p")
lapply(AIC_pi_red, round, 2) %>%
do.call("cbind", .) %>%
`rownames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
rbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "p") %>% t()
?t
lapply(AIC_pi_red, round, 2)
lapply(AIC_pi_red, round, 2) %>%
do.call("rbind", .)
lapply(AIC_pi_red, round, 2) %>%
do.call("rbind", .) %>%
`colnames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")")))
lapply(AIC_pi_red, round, 2) %>%
do.call("rbind", .) %>%
`colnames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
cbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
)
lapply(AIC_pi_red, round, 2) %>%
do.call("rbind", .) %>%
`colnames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
cbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame()
lapply(AIC_pi_red, round, 2) %>%
do.call("rbind", .) %>%
`colnames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
cbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "Study ID") %>%
`colnames<-`(unique(red_bc$id))
lapply(AIC_pi_red, round, 2) %>%
do.call("rbind", .) %>%
`colnames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
cbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "Study ID") %>%
`rownames<-`(unique(red_bc$id))
lapply(AIC_pi_red, round, 2) %>%
do.call("rbind", .) %>%
`colnames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
cbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "Study ID") %>%
`rownames<-`(unique(red_bc$id)) %>%
kableExtra::landscape()
lapply(AIC_pi_red, round, 2) %>%
do.call("rbind", .) %>%
`colnames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
cbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "Study ID") %>%
`rownames<-`(unique(red_bc$id)) %>%
kable("latex", align = "c", booktabs = T, escape = F,
caption = "AIC for the study-specific second-degree fractional polynomials with power terms specified by $p$ in a dose-response meta-analysis between red mead consumption (g per day) and bladder cancer risk. The last row reports the power term corresponding to the lowest AIC.") %>%
kable_styling(font_size = 8)
lapply(AIC_pi_red, round, 2) %>%
do.call("rbind", .) %>%
`colnames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
cbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "Study ID") %>%
`rownames<-`(unique(red_bc$id)) %>%
kable("latex", align = "c", booktabs = T, escape = F,
caption = "AIC for the study-specific second-degree fractional polynomials with power terms specified by $p$ in a dose-response meta-analysis between red mead consumption (g per day) and bladder cancer risk. The last row reports the power term corresponding to the lowest AIC.") %>%
kable_styling(font_size = 8, latex_options = "scale_down")
lapply(AIC_pi_red, round, 2) %>%
do.call("rbind", .) %>%
`colnames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
cbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "Study ID") %>%
`rownames<-`(unique(red_bc$id)) %>%
kable("latex", align = "c", booktabs = T, escape = F,
caption = "AIC for the study-specific second-degree fractional polynomials with power terms specified by $p$ in a dose-response meta-analysis between red mead consumption (g per day) and bladder cancer risk. The last row reports the power term corresponding to the lowest AIC.") %>%
kable_styling(font_size = 8, latex_options = "scale_down") %>%
landscape()
?landscape
landscape(knitr::kable(head(mtcars), "latex"))
lapply(AIC_pi_red, round, 2) %>%
do.call("rbind", .) %>%
`colnames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
cbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "Study ID") %>%
`rownames<-`(unique(red_bc$id)) %>%
kable("latex", align = "c", booktabs = T, escape = F,
caption = "AIC for the study-specific second-degree fractional polynomials with power terms specified by $p$ in a dose-response meta-analysis between red mead consumption (g per day) and bladder cancer risk. The last row reports the power term corresponding to the lowest AIC.") %>%
landscape() %>%
kable_styling(font_size = 8)
lapply(AIC_pi_red, round, 2) %>%
do.call("rbind", .) %>%
`colnames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
cbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
mutate(
`Study ID` = unique(red_bc$id)
) %>%
kable("latex", align = "c", booktabs = T, escape = F,
caption = "AIC for the study-specific second-degree fractional polynomials with power terms specified by $p$ in a dose-response meta-analysis between red mead consumption (g per day) and bladder cancer risk. The last row reports the power term corresponding to the lowest AIC.") %>%
landscape() %>%
kable_styling(font_size = 8)
lapply(AIC_pi_red, round, 2) %>%
do.call("cbind", .) %>%
`rownames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
rbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "p") %>%
kable("latex", align = "c", booktabs = T, escape = F,
caption = "AIC for the study-specific second-degree fractional polynomials with power terms specified by $p$ in a dose-response meta-analysis between red mead consumption (g per day) and bladder cancer risk. The last row reports the power term corresponding to the lowest AIC.") %>%
kable_styling(font_size = 8, latex_options = c("striped")) %>%
landscape()
lapply(AIC_pi_red, round, 2) %>%
do.call("cbind", .) %>%
`rownames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
rbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "p") %>%
kable("latex", booktabs = T, longtable = T,
caption = "AIC for the study-specific second-degree fractional polynomials with power terms specified by $p$ in a dose-response meta-analysis between red mead consumption (g per day) and bladder cancer risk. The last row reports the power term corresponding to the lowest AIC.") %>%
landscape()
?add_header_above
lapply(AIC_pi_red, round, 2) %>%
do.call("cbind", .) %>%
`rownames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
rbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "p") %>%
kable("latex", align = "c", booktabs = T, escape = F, longtable = T,
caption = "AIC for the study-specific second-degree fractional polynomials with power terms specified by $p$ in a dose-response meta-analysis between red mead consumption (g per day) and bladder cancer risk. The last row reports the power term corresponding to the lowest AIC.") %>%
add_header_above(c(" ", "Study ID" = 2)) %>%
kable_styling(font_size = 12, latex_options = c("repeat_header")) %>%
landscape()
lapply(AIC_pi_red, round, 2) %>%
do.call("cbind", .) %>%
`rownames<-`(apply(fpgrid, 1, function(f) paste0("(", paste(f, collapse = ", "), ")"))) %>%
rbind(
`best p` = apply(fpgrid[unlist(pb_red), ], 1, function(f) paste(f, collapse = ", "))
) %>%
as.data.frame() %>%
rownames_to_column(var = "p") %>%
kable("latex", align = "c", booktabs = T, escape = F, longtable = T,
caption = "AIC for the study-specific second-degree fractional polynomials with power terms specified by $p$ in a dose-response meta-analysis between red mead consumption (g per day) and bladder cancer risk. The last row reports the power term corresponding to the lowest AIC.") %>%
add_header_above(c(" " = 1, "Study ID" = 13)) %>%
kable_styling(latex_options = c("repeat_header")) %>%
landscape()
?data
data(package = "dosresmeta")
try(data(package = "dosresmeta"))
data(package = "dosresmeta")
data(package = "dosresmeta")$results
d <- data(package = "dosresmeta")$results
cbind(Name = d$Item, Description = d$Title)
d
cbind(Name = d[, "Item"], Description = d[, "Title"])
library(kableExtra)
cbind(Name = d[, "Item"], Description = d[, "Title"]) %>%
kable()
library(tidyverse)
cbind(Name = d[, "Item"], Description = d[, "Title"]) %>%
kable()
library(knitr)
cbind(Name = d[, "Item"], Description = d[, "Title"]) %>%
kable()
data(package = "dosresmeta")
d <- data(package = "dosresmeta")$results
cbind(Name = d[, "Item"], Description = d[, "Title"]) %>%
kable(booktabs = T, caption = "Data sets available in the \\pkg{dosresmeta} $\\R$ package.") %>%
kable_styling(full_width = F) %>%
column_spec(2, width = "32em")
cbind(Name = d[, "Item"], Description = d[, "Title"]) %>%
kable(format = "latex", booktabs = T, caption = "Data sets available in the \\pkg{dosresmeta} $\\R$ package.") %>%
kable_styling(full_width = F) %>%
column_spec(2, width = "32em")
library(dosresmeta)
data("coffee_mort")
lin <- dosresmeta(logrr ~ dose, id = id, type = type, cases = cases, n = n,
se = se, data = coffee_mort)
lin <- dosresmeta(logrr ~ dose, id = id, type = type, cases = cases, n = n,
se = se, data = coffee_mort, proc = "1stage")
lin <- dosresmeta(logrr ~ dose, id = id, type = type, cases = cases, n = n,
se = se, data = coffee_mort, proc = "1stage")
logLik(lin)
AIC(lin)
-2*logLik(lin)+2
-2*logLik(lin)
-2*logLik(lin)+2*2
quadr <- dosresmeta(logrr ~ dose + I(dose^2), id = id, type = type, cases = cases, n = n,
se = se, data = coffee_mort, proc = "1stage")
logLik(quadr)
?lmer
VarCorr(lin)
logLik(lin)
quadr <- dosresmeta(logrr ~ dose + I(dose^2), id = id, type = type, cases = cases, n = n,
se = se, data = coffee_mort, proc = "1stage")
logLik(quadr)
library(dosresmeta)
library(knitr)
opts_knit$set(self.contained=FALSE, out.format = "latex")
opts_chunk$set(echo = FALSE, message = FALSE, comment = NA, fig.path = "../figure/",
out.width = "\\textwidth", cache = FALSE, highlight = F, background = "white",
fig.align = "center", fig.width = 7, fig.height = 4.5, fig.pos= "ht!",
prompt = TRUE, size = "footnotesize", warning = FALSE)
options(prompt ="R> ", width = 85, show.signif.stars = FALSE, knitr.kable.NA = '')
knit_theme$set("print")
pkgs <- c("knitr", "tidyverse", "dosresmeta", "lubridate", "rworldmap", "Epi", "xtable",
"cowplot", "gridExtra", "scales", "kableExtra", "rms", "metafor", "hetmeta")
lapply(pkgs, require, character.only = TRUE)
# loading libraries and useful functions
source("code/functions.R")
# loading data
data_names <- paste0("data/",
c("count_meta", "count_grl", "count_dosresmeta", "res_cov_lin",
"res_cov_quadr", "breast_1501", "hyp_vi"),
".RData")
lapply(data_names, load, .GlobalEnv)
# setting a ggplot theme for all the plots
theme_kappa <- theme_light() +
theme(panel.border = element_blank(), axis.line = element_line(),
plot.title = element_text(hjust = 0.5))
theme_set(theme_kappa)
sessionInfo()
